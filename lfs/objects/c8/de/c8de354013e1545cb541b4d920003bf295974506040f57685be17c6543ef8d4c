using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerRollingState : PlayerCharacterSuperState
{
    private Transform _mainCamera;
    private CharacterController _controller;
    private Vector3 _targetDirection;

    private float _targetRotation;
    private float _timer;
    private bool _motionStart;

    public PlayerRollingState(PlayerCharacter playerCharacter, FiniteStateMachine machine) : base(playerCharacter, machine) 
    {
        _mainCamera = Camera.main.transform;
        _controller = playerCharacter.GetComponent<CharacterController>();
    }
    public override void Enter()
    {
        base.Enter();
        canTransition = true;
        _timer = 0.0f;
        _motionStart = false;
        playerCharacter.isRolling = true;

        //Set roll direction
        Vector3 inputDirection = new Vector3(PlayerInput.instance.move.x, 0.0f, PlayerInput.instance.move.y).normalized;
        if (PlayerInput.instance.move != Vector2.zero)
        {
            _targetRotation = Mathf.Atan2(inputDirection.x, inputDirection.z) * Mathf.Rad2Deg + _mainCamera.eulerAngles.y;
        }
        else
        {
            _targetRotation = _mainCamera.eulerAngles.y;
        }
        playerCharacter.transform.rotation = Quaternion.Euler(0, _targetRotation, 0);
        _targetDirection = Quaternion.Euler(0.0f, _targetRotation, 0.0f) * Vector3.forward;
    }
    public override void LogicUpdate()
    {
        base.LogicUpdate();
        _timer += Time.deltaTime;
        //Roll offset timer
        if (!_motionStart && _timer >= playerCharacter.rollDelayTime)
        {
            canTransition = false;
            _timer = 0.0f;
            _motionStart = true;
            playerCharacter.isInvincible = true;
            //Roll animation trigger
            playerCharacter.animator.SetBool("Rolling", true);
        }
        
        if (_motionStart)
        {
            //Move forward
            _controller.Move(_targetDirection.normalized * playerCharacter.rollingSpeed * Time.deltaTime);
            if (_timer >= playerCharacter.invincibleTime) //invincibility time timer
            {
                _timer = 0.0f;
                playerCharacter.isInvincible = false;
                canTransition = true;
            }
        }
        //
        if (playerCharacter.isRolling == false)
        {
            _motionStart = false;
            playerCharacter.animator.SetBool("Rolling", false);
            machine.ChangeState(playerCharacter.movingState);
        }
    }
    public override void Exit()
    {
        base.Exit();
    }
}
