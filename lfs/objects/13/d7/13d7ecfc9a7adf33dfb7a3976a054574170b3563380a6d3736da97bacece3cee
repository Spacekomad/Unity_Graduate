using System;
using UnityEngine;
using UnityEngine.Pool;

[Serializable]
public abstract class BoidObject : MonoBehaviour
{
    public BoidManager manager;
    public Transform target;

    protected Vector3 _desiredDirection;
    protected Vector3 _EgoVector; // (m/s)

    protected IObjectPool<BoidObject> pool;

    // Property
    public Vector3 desiredDirection 
    { 
        get 
        {
            if (_desiredDirection.magnitude > manager.maxSpeed)
            {
                return _desiredDirection.normalized * manager.maxSpeed;
            }
            else
            {
                return _desiredDirection;
            }
        } 
    }
    public Vector3 EgoVector { get { return _EgoVector; } }

    // Start is called before the first frame update
    protected virtual void Start()
    {
        _EgoVector = Vector3.zero;
        _desiredDirection = Vector3.zero;
    }

    // Update is called once per frame
    protected virtual void Update()
    {
        CalculateDesiredDirection();

        Rotate();
        Move();
    }

    protected virtual void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Boid Range"))
        {
            transform.position = other.transform.position + (other.transform.position - transform.position);
        }
    }

    protected void CalculateEgoVector()
    {
        _EgoVector = transform.forward * manager.forwardSpeed;
        if (target)
        {
            _EgoVector += (target.position - transform.position + (Vector3.up * 2.0f)) * manager.targetFollowWeight;
        }

    }

    protected abstract Vector3 FindCohesionVec();
    protected abstract Vector3 FindAlignmentVec();
    protected abstract Vector3 FindSeparationVec();

    protected void CalculateDesiredDirection()
    {
        CalculateEgoVector();
        _desiredDirection = _EgoVector;

        _desiredDirection += FindCohesionVec() * manager.cohesionWeight;
        _desiredDirection += FindAlignmentVec() * manager.alignmentWeight;
        _desiredDirection += FindSeparationVec() * manager.separationWeight;
    }

    protected void Move()
    {
        if (_desiredDirection.magnitude > manager.maxSpeed)
        {
            transform.Translate(transform.forward * manager.maxSpeed * Time.deltaTime);
        }
        else
        {
            transform.Translate(transform.forward * _desiredDirection.magnitude * Time.deltaTime);
        }

    }

    protected void Rotate()
    {
        /*
        // 현재 방향과 원하는 방향 사이의 각도 계산
        float angle = Vector3.Angle(transform.forward, _desiredDirection);
        // 초당 회전 가능한 최대 각도 계산
        float maxRotateAngle = manager.maxRotateAnglePerSec * Time.deltaTime;
        // 회전 가능한 각도보다 실제 각도가 큰 경우 클램핑
        float rotateAngle = Mathf.Min(angle, maxRotateAngle);
        // 회전 축 계산
        Vector3 rotateAxis = Vector3.Cross(transform.forward, desiredDirection);
        // 회전 각도와 축을 이용하여 새로운 회전 Quaternion 생성
        Quaternion rotation = Quaternion.AngleAxis(rotateAngle, rotateAxis);
        // 현재 게임 오브젝트의 회전 적용
        transform.rotation = rotation * transform.rotation;
        */
        
        transform.rotation = Quaternion.RotateTowards(transform.rotation, 
            Quaternion.FromToRotation(transform.forward, _desiredDirection), 
            manager.maxRotateAnglePerSec * Time.deltaTime);
        

        /*
        Vector3 targetVec = Vector3.Lerp(this.transform.forward, _desiredDirection, Time.deltaTime);
        targetVec = targetVec.normalized;
        if (targetVec == Vector3.zero)
            targetVec = transform.forward;
        transform.rotation = Quaternion.LookRotation(targetVec);
        */
    }

    public void SetPool(IObjectPool<BoidObject> managedPool)
    {
        pool = managedPool;
    }

    public void DestroyThisObject()
    {
        pool.Release(this);
    }

    protected virtual void OnDrawGizmosSelected()
    {
        if (this)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawWireSphere(transform.position, manager.separationRangeRadius);

            Gizmos.color = Color.blue;
            Gizmos.DrawWireSphere(transform.position, manager.alignmentRangeRadius);

            Gizmos.color = Color.green;
            Gizmos.DrawWireSphere(transform.position, manager.cohesionRangeRadius);

            Gizmos.DrawRay(transform.position, transform.forward * 5.0f);
        }
    }
}
