using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class HereticLance : HereticWeapon
{
    private int _comboIdx;
    public int comboIdx { get { return _comboIdx; } }

    private int _parryLayer;
    private bool _triggerParryCheck;
    private bool _parried = false;

    private MeleeAttackInfo[] _basicAttackComboData;
    private MeleeAttackInfo[] _strongAttackComboData;
    private MeleeAttackInfo _skillAttackData;
    private MeleeAttackInfo[] _dashAttackData;

    private List<Transform> _caughtEntities;

    private bool _execute = false;

    public MeleeAttackInfo[] basicAttackComboData { get { return _basicAttackComboData; } }


    public HereticLance(Character_Heretic character, WeaponData weaponData) : base(character, weaponData)
    {
        _comboIdx = 0;
        _basicAttackComboData = weaponData.comboAttackData;
        _strongAttackComboData = weaponData.comboStrongAttackData;
        _skillAttackData = weaponData.comboSkillData[0];
        _dashAttackData = weaponData.comboDashAttackData;
        _parryLayer = LayerMask.GetMask("Player Parry");

        _caughtEntities = new List<Transform>();
    }

    public override void InitWeapon()
    {
        _comboIdx = 0;
        _parried = false;
        _caughtEntities.Clear();
        _execute = false;
    }

    public override bool BasicAttack()
    {
        return Attack(Globals.AnimationParameters_Heretic.BasicAttact_Close, _basicAttackComboData);
    }

    public override bool DashAttack()
    {
        return Attack(Globals.AnimationParameters_Heretic.SprintAttack, _dashAttackData);
    }

    public override bool Skill()
    {
        Vector3 hitboxOffset = character.transform.right * _skillAttackData.attackRangeOffset.x +
            character.transform.up * _skillAttackData.attackRangeOffset.y +
            character.transform.forward * _skillAttackData.attackRangeOffset.z;

        if (character.triggerAnimationEnd)
        {
            return false;
        }
        else if (character.triggerCatchEnd)
        {
            if (_execute)
            {

            }
            else
            {
                character.animator.SetTrigger(Globals.AnimationParameters_Heretic.Execute_Failed);
                return false;
            }
        }
        else
        {
            if (character.middleOfAttack)
            {
                Collider[] hitEntities = Physics.OverlapBox(character.transform.position + hitboxOffset,
                    _skillAttackData.attackRange / 2,
                    character.transform.rotation,
                    _skillAttackData.attackTarget,
                    QueryTriggerInteraction.Collide);

                foreach (Collider entity in hitEntities)
                {
                    PlayerCharacter player = entity.transform.parent.parent.GetComponent<PlayerCharacter>();
                    if (!_caughtEntities.Contains(entity.transform.parent.parent) 
                        && 
                        !player.isInvincible)
                    {
                        _caughtEntities.Add(entity.transform.parent.parent);
                        // 걸린 적 처형 시작
                        player.TakeExecute((character.status.attackPower + weaponPower) * _skillAttackData.attackPowerCoefficient);
                        _execute = true;
                    }
                }
            }
        }
        return true;
    }

    public override bool StrongAttack()
    {
        return Attack(Globals.AnimationParameters_Heretic.StrongAttack_Far, _strongAttackComboData);
    }
    public IEnumerator ComboAttack(MeleeAttackInfo comboData)
    {
        List<Transform> damagedEnemies = new List<Transform>();

        Vector3 hitboxOffset = character.transform.right * comboData.attackRangeOffset.x +
            character.transform.up * comboData.attackRangeOffset.y +
            character.transform.forward * comboData.attackRangeOffset.z;

        while (!character.middleOfAttack)
        {
            yield return null;
        }

        _triggerParryCheck = true;
        while (character.middleOfAttack)
        {
            if (_triggerParryCheck)
            {
                _triggerParryCheck = false;
                if (ParryCheck(comboData, hitboxOffset))
                {
                    _parried = true;
                    yield break;
                }
            }

            Collider[] hitEntities = Physics.OverlapBox(character.transform.position + hitboxOffset,
                comboData.attackRange / 2,
                character.transform.rotation,
                comboData.attackTarget,
                QueryTriggerInteraction.Collide);

            foreach (Collider entity in hitEntities)
            {
                Debug.Log(entity);
                if (!damagedEnemies.Contains(entity.transform.parent.parent))
                {
#if UNITY_EDITOR
                    Debug.Log(entity + " damage");
#endif
                    //적에게 데미지 주기
                    entity.transform.parent.parent.GetComponent<PlayerCharacter>().TakeDamage((character.status.attackPower + weaponPower) * comboData.attackPowerCoefficient,
                        (character.status.stiffnessPower + weaponStiffness) * comboData.attackStiffnessCoefficient);
                    damagedEnemies.Add(entity.transform.parent.parent);
                }
            }
            // 공격으로 인해 Destroy된 적 데미지 목록에서 제거
            damagedEnemies.RemoveAll(enemy => enemy == null);

            yield return null;
        }
    }

    private bool Attack(int startAnim, MeleeAttackInfo[] combodata)
    {
        if (_parried)
        {
            character.getStiffness = true; // 임시로 경직, 나중에 패리당한 상태 추가해야함
            return false;
        }

        if (_comboIdx == 0)
        {
            character.animator.SetTrigger(startAnim);

            character.StartCoroutine(ComboAttack(combodata[_comboIdx]));
            ++_comboIdx;
        }
        if (character.triggerAnimationEnd)
        {
            if (_comboIdx < combodata.Length)
            {
                character.StartCoroutine(ComboAttack(combodata[_comboIdx]));
                ++_comboIdx;
            }
            else
            {
                _comboIdx = 0;
                return false;
            }
        }
        return true;
    }
    private bool ParryCheck(MeleeAttackInfo comboData, Vector3 hitboxOffset)
    {
        return Physics.CheckBox(character.transform.position + hitboxOffset,
                comboData.attackRange / 2,
                character.transform.rotation,
                _parryLayer,
                QueryTriggerInteraction.Collide);
    }
}
